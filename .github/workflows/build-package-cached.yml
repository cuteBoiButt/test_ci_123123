name: build-package-cached
on:
  push:
    branches:
      - main
    tags:
      - 'v*' # Trigger on tags like v1.0, v2.3.4
  pull_request:
    branches:
      - main

jobs:
  build:
    name: ${{ matrix.os }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-13, windows-2025]

    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - uses: lukka/get-cmake@latest
        with:
          cmakeVersion: 4.0.3
          ninjaVersion: 1.13.1

      # On Windows runners, ensure the Developer Command Prompt environment is set up.
      - uses: ilammy/msvc-dev-cmd@v1
        if: runner.os == 'Windows'

      - name: Bootstrap vcpkg
        shell: bash
        run: ./vcpkg/bootstrap-vcpkg.sh -disableMetrics

      - name: Install Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y mono-complete doxygen graphviz clang bison flex autoconf libltdl-dev python3-jinja2 libx11-dev libxft-dev libxext-dev libxi-dev libxtst-dev libxrandr-dev

      - name: Configure NuGet credentials using vcpkg's nuget.exe
        shell: bash
        run: |
          # Get the path to vcpkg's managed nuget.exe. tr -d '\r' is for Windows compatibility.
          NUGET_EXE_PATH=$(./vcpkg/vcpkg fetch nuget | tail -n 1 | tr -d '\r')

          # Determine the command prefix (mono for non-windows)
          CMD_PREFIX=""
          if [[ "${{ runner.os }}" != "Windows" ]]; then
            CMD_PREFIX="mono"
          fi

          echo "Configuring NuGet source..."
          # Add the source with credentials, as per the documentation
          $CMD_PREFIX "$NUGET_EXE_PATH" sources add \
            -Name "github" \
            -Source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
            -UserName "GITHUB_TOKEN" \
            -Password "${{ secrets.GITHUB_TOKEN }}" \
            -StorePasswordInClearText

          echo "Setting API key..."
          # Set the API key for the source to ensure push access
          $CMD_PREFIX "$NUGET_EXE_PATH" setapikey "${{ secrets.GITHUB_TOKEN }}" \
            -Source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
  
      - name: Set vcpkg binary sources environment variable
        shell: bash
        run: |
          echo "VCPKG_BINARY_SOURCES=clear;nuget,https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json,readwrite" >> $GITHUB_ENV
          
      - name: Configure CMake
        run: |
          cmake --preset ninja-multi-vcpkg

      - name: Build (Release configuration)
        run: |
          cmake --build --preset ninja-vcpkg-release

      - name: Package (Release configuration)
        run: |
          cmake --build --preset ninja-vcpkg-release --target package

      - name: Create AppImage on Linux
        if: runner.os == 'Linux'
        run: |
          cd build
          cmake --install . --config Release --component client --prefix ./AppDir/usr/bin

          mkdir -p AppDir/usr/share/applications
          cat > AppDir/usr/share/applications/client_app.desktop << EOF
          [Desktop Entry]
          Type=Application
          Name=Slightly Pretty Chat
          Exec=client_app
          Categories=Utility;
          Icon=appname
          EOF

          mkdir -p AppDir/usr/share/icons/hicolor/scalable/apps
          touch AppDir/usr/share/icons/hicolor/scalable/apps/appname.svg

          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage

          ./linuxdeploy-x86_64.AppImage --appimage-extract
          rm linuxdeploy-x86_64.AppImage
          ./squashfs-root/AppRun --appdir AppDir --output appimage

      - name: Generate SLSA Attestation for binaries
        if: github.ref_type == 'tag'
        id: slsa
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: |
            build/*.dmg
            build/*.zip
            build/*.tar.gz
            build/*.AppImage

      - name: Prepare Artifacts for Upload
        shell: bash
        run: |
          mkdir upload_dir
          # Copy all package files, but only if they exist
          for f in build/*.dmg build/*.zip build/*.tar.gz build/*.AppImage; do
            if [ -f "$f" ]; then
              cp "$f" upload_dir/
            fi
          done
          # Conditionally copy the attestation bundle, which only exists on tag runs
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            cp "${{ steps.slsa.outputs.bundle-path }}" upload_dir/
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-packages-${{ matrix.os }}
          path: upload_dir/

      - name: Log in to GitHub Container Registry
        if: runner.os == 'Linux'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Docker build contexts
        if: runner.os == 'Linux'
        run: |
          echo "Preparing Docker build contexts from CPack output..."
          SERVER_TARBALL=$(find build -name '*-server.tar.gz' | head -n 1)
          AGGREGATOR_TARBALL=$(find build -name '*-aggregator.tar.gz' | head -n 1)
          if [ -z "$SERVER_TARBALL" ]; then echo "::error::Server tarball not found!"; exit 1; fi
          if [ -z "$AGGREGATOR_TARBALL" ]; then echo "::error::Aggregator tarball not found!"; exit 1; fi
          mkdir -p docker_contexts/server docker_contexts/aggregator
          tar -xvf "$SERVER_TARBALL" -C docker_contexts/server
          tar -xvf "$AGGREGATOR_TARBALL" -C docker_contexts/aggregator

      - name: Generate dynamic Docker tags
        if: runner.os == 'Linux'
        id: docker_meta
        run: |
          REPO_LC=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')
          echo "repo_lc=${REPO_LC}" >> $GITHUB_OUTPUT

          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            TAG="${{ github.ref_name }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            TAG="latest"
          else
            TAG=$(echo "${{ github.sha }}" | cut -c1-7)
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      - name: Build and push Server Docker image
        if: runner.os == 'Linux'
        id: build_server_image
        uses: docker/build-push-action@v5
        with:
          context: docker_contexts/server
          file: ./Dockerfile.server
          push: true
          tags: ghcr.io/${{ steps.docker_meta.outputs.repo_lc }}-server:${{ steps.docker_meta.outputs.tag }}

      - name: Attest Server Docker image
        if: runner.os == 'Linux' && github.ref_type == 'tag'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ghcr.io/${{ steps.docker_meta.outputs.repo_lc }}-server
          subject-digest: ${{ steps.build_server_image.outputs.digest }}
          push-to-registry: true

      - name: Build and push Aggregator Docker image
        if: runner.os == 'Linux'
        id: build_aggregator_image
        uses: docker/build-push-action@v5
        with:
          context: docker_contexts/aggregator
          file: ./Dockerfile.aggregator
          push: true
          tags: ghcr.io/${{ steps.docker_meta.outputs.repo_lc }}-aggregator:${{ steps.docker_meta.outputs.tag }}

      - name: Attest Aggregator Docker image
        if: runner.os == 'Linux' && github.ref_type == 'tag'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ghcr.io/${{ steps.docker_meta.outputs.repo_lc }}-aggregator
          subject-digest: ${{ steps.build_aggregator_image.outputs.digest }}
          push-to-registry: true

      - name: Generate Doxygen documentation
        if: runner.os == 'Linux'
        run: doxygen Doxyfile

      - name: Upload Pages artifact
        if: runner.os == 'Linux'
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'docs/html'

  deploy-gh-pages:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  create-release:
    needs: build
    if: github.ref_type == 'tag'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create Release and Upload Verifiable Artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ github.ref_name }}
        run: |
          NOTES="This release includes cryptographically signed SLSA provenance attestations for all binaries and container images.
          You can verify the integrity and origin of these files using the official GitHub CLI or slsa-verifier.
          See: https://github.com/slsa-framework/slsa-verifier"

          gh release create "$TAG" \
            --title "Release $TAG" \
            --notes "$NOTES" \
            --latest \
            artifacts/*/*
